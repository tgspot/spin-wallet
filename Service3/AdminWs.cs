//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 
namespace RO.Service3 {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AdminWsSoap", Namespace="http://Rintagi.com/")]
    public partial class AdminWs : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetLastPageInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdLastPageInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelDshFldDtlOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelDshFldOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdDshFldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaScrImpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetButtonHlpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScreenHlpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGlobalFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScreenFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScreenTabOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScreenCriHlpOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogUsageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInfoByColOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidOvrideOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMsgOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormatOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScrCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback MkGetScreenInOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScreenInOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdScrCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthRowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthColOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthExpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScreenLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrinterListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdLastCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportHlpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportCriHlpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportSctOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRptPwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaWizImpOperationCompleted;
        
        /// <remarks/>
        public AdminWs() {
            this.Url = "http://rnd08/ROWs/AdminWs.asmx";
        }
        
        /// <remarks/>
        public event GetLastPageInfoCompletedEventHandler GetLastPageInfoCompleted;
        
        /// <remarks/>
        public event UpdLastPageInfoCompletedEventHandler UpdLastPageInfoCompleted;
        
        /// <remarks/>
        public event GetLastCriteriaCompletedEventHandler GetLastCriteriaCompleted;
        
        /// <remarks/>
        public event DelDshFldDtlCompletedEventHandler DelDshFldDtlCompleted;
        
        /// <remarks/>
        public event DelDshFldCompletedEventHandler DelDshFldCompleted;
        
        /// <remarks/>
        public event UpdDshFldCompletedEventHandler UpdDshFldCompleted;
        
        /// <remarks/>
        public event GetSchemaScrImpCompletedEventHandler GetSchemaScrImpCompleted;
        
        /// <remarks/>
        public event GetButtonHlpCompletedEventHandler GetButtonHlpCompleted;
        
        /// <remarks/>
        public event GetClientRuleCompletedEventHandler GetClientRuleCompleted;
        
        /// <remarks/>
        public event GetScreenHlpCompletedEventHandler GetScreenHlpCompleted;
        
        /// <remarks/>
        public event GetGlobalFilterCompletedEventHandler GetGlobalFilterCompleted;
        
        /// <remarks/>
        public event GetScreenFilterCompletedEventHandler GetScreenFilterCompleted;
        
        /// <remarks/>
        public event GetScreenTabCompletedEventHandler GetScreenTabCompleted;
        
        /// <remarks/>
        public event GetScreenCriHlpCompletedEventHandler GetScreenCriHlpCompleted;
        
        /// <remarks/>
        public event LogUsageCompletedEventHandler LogUsageCompleted;
        
        /// <remarks/>
        public event GetInfoByColCompletedEventHandler GetInfoByColCompleted;
        
        /// <remarks/>
        public event IsValidOvrideCompletedEventHandler IsValidOvrideCompleted;
        
        /// <remarks/>
        public event GetMsgCompletedEventHandler GetMsgCompleted;
        
        /// <remarks/>
        public event GetLabelCompletedEventHandler GetLabelCompleted;
        
        /// <remarks/>
        public event GetLabelsCompletedEventHandler GetLabelsCompleted;
        
        /// <remarks/>
        public event GetFormatCompletedEventHandler GetFormatCompleted;
        
        /// <remarks/>
        public event GetScrCriteriaCompletedEventHandler GetScrCriteriaCompleted;
        
        /// <remarks/>
        public event MkGetScreenInCompletedEventHandler MkGetScreenInCompleted;
        
        /// <remarks/>
        public event GetScreenInCompletedEventHandler GetScreenInCompleted;
        
        /// <remarks/>
        public event UpdScrCriteriaCompletedEventHandler UpdScrCriteriaCompleted;
        
        /// <remarks/>
        public event EncryptStringCompletedEventHandler EncryptStringCompleted;
        
        /// <remarks/>
        public event GetAuthRowCompletedEventHandler GetAuthRowCompleted;
        
        /// <remarks/>
        public event GetAuthColCompletedEventHandler GetAuthColCompleted;
        
        /// <remarks/>
        public event GetAuthExpCompletedEventHandler GetAuthExpCompleted;
        
        /// <remarks/>
        public event GetScreenLabelCompletedEventHandler GetScreenLabelCompleted;
        
        /// <remarks/>
        public event GetPrinterListCompletedEventHandler GetPrinterListCompleted;
        
        /// <remarks/>
        public event UpdLastCriteriaCompletedEventHandler UpdLastCriteriaCompleted;
        
        /// <remarks/>
        public event GetReportHlpCompletedEventHandler GetReportHlpCompleted;
        
        /// <remarks/>
        public event GetReportCriHlpCompletedEventHandler GetReportCriHlpCompleted;
        
        /// <remarks/>
        public event GetReportSctCompletedEventHandler GetReportSctCompleted;
        
        /// <remarks/>
        public event GetReportItemCompletedEventHandler GetReportItemCompleted;
        
        /// <remarks/>
        public event GetRptPwdCompletedEventHandler GetRptPwdCompleted;
        
        /// <remarks/>
        public event GetSchemaWizImpCompletedEventHandler GetSchemaWizImpCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetLastPageInfo", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastPageInfo(int screenId, int usrId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetLastPageInfo", new object[] {
                        screenId,
                        usrId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLastPageInfo(int screenId, int usrId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLastPageInfo", new object[] {
                        screenId,
                        usrId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLastPageInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastPageInfoAsync(int screenId, int usrId, string dbConnectionString, string dbPassword) {
            this.GetLastPageInfoAsync(screenId, usrId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetLastPageInfoAsync(int screenId, int usrId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetLastPageInfoOperationCompleted == null)) {
                this.GetLastPageInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastPageInfoOperationCompleted);
            }
            this.InvokeAsync("GetLastPageInfo", new object[] {
                        screenId,
                        usrId,
                        dbConnectionString,
                        dbPassword}, this.GetLastPageInfoOperationCompleted, userState);
        }
        
        private void OnGetLastPageInfoOperationCompleted(object arg) {
            if ((this.GetLastPageInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastPageInfoCompleted(this, new GetLastPageInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/UpdLastPageInfo", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdLastPageInfo(int screenId, int usrId, string lastPageInfo, string dbConnectionString, string dbPassword) {
            this.Invoke("UpdLastPageInfo", new object[] {
                        screenId,
                        usrId,
                        lastPageInfo,
                        dbConnectionString,
                        dbPassword});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdLastPageInfo(int screenId, int usrId, string lastPageInfo, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdLastPageInfo", new object[] {
                        screenId,
                        usrId,
                        lastPageInfo,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdLastPageInfo(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdLastPageInfoAsync(int screenId, int usrId, string lastPageInfo, string dbConnectionString, string dbPassword) {
            this.UpdLastPageInfoAsync(screenId, usrId, lastPageInfo, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void UpdLastPageInfoAsync(int screenId, int usrId, string lastPageInfo, string dbConnectionString, string dbPassword, object userState) {
            if ((this.UpdLastPageInfoOperationCompleted == null)) {
                this.UpdLastPageInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdLastPageInfoOperationCompleted);
            }
            this.InvokeAsync("UpdLastPageInfo", new object[] {
                        screenId,
                        usrId,
                        lastPageInfo,
                        dbConnectionString,
                        dbPassword}, this.UpdLastPageInfoOperationCompleted, userState);
        }
        
        private void OnUpdLastPageInfoOperationCompleted(object arg) {
            if ((this.UpdLastPageInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdLastPageInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetLastCriteria", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastCriteria(int rowsExpected, int screenId, int reportId, int usrId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetLastCriteria", new object[] {
                        rowsExpected,
                        screenId,
                        reportId,
                        usrId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLastCriteria(int rowsExpected, int screenId, int reportId, int usrId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLastCriteria", new object[] {
                        rowsExpected,
                        screenId,
                        reportId,
                        usrId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLastCriteria(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastCriteriaAsync(int rowsExpected, int screenId, int reportId, int usrId, string dbConnectionString, string dbPassword) {
            this.GetLastCriteriaAsync(rowsExpected, screenId, reportId, usrId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetLastCriteriaAsync(int rowsExpected, int screenId, int reportId, int usrId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetLastCriteriaOperationCompleted == null)) {
                this.GetLastCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastCriteriaOperationCompleted);
            }
            this.InvokeAsync("GetLastCriteria", new object[] {
                        rowsExpected,
                        screenId,
                        reportId,
                        usrId,
                        dbConnectionString,
                        dbPassword}, this.GetLastCriteriaOperationCompleted, userState);
        }
        
        private void OnGetLastCriteriaOperationCompleted(object arg) {
            if ((this.GetLastCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastCriteriaCompleted(this, new GetLastCriteriaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/DelDshFldDtl", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelDshFldDtl(string DshFldDtlId, string dbConnectionString, string dbPassword) {
            this.Invoke("DelDshFldDtl", new object[] {
                        DshFldDtlId,
                        dbConnectionString,
                        dbPassword});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDelDshFldDtl(string DshFldDtlId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DelDshFldDtl", new object[] {
                        DshFldDtlId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDelDshFldDtl(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DelDshFldDtlAsync(string DshFldDtlId, string dbConnectionString, string dbPassword) {
            this.DelDshFldDtlAsync(DshFldDtlId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void DelDshFldDtlAsync(string DshFldDtlId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.DelDshFldDtlOperationCompleted == null)) {
                this.DelDshFldDtlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelDshFldDtlOperationCompleted);
            }
            this.InvokeAsync("DelDshFldDtl", new object[] {
                        DshFldDtlId,
                        dbConnectionString,
                        dbPassword}, this.DelDshFldDtlOperationCompleted, userState);
        }
        
        private void OnDelDshFldDtlOperationCompleted(object arg) {
            if ((this.DelDshFldDtlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelDshFldDtlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/DelDshFld", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelDshFld(string DshFldId, string dbConnectionString, string dbPassword) {
            this.Invoke("DelDshFld", new object[] {
                        DshFldId,
                        dbConnectionString,
                        dbPassword});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDelDshFld(string DshFldId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DelDshFld", new object[] {
                        DshFldId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDelDshFld(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DelDshFldAsync(string DshFldId, string dbConnectionString, string dbPassword) {
            this.DelDshFldAsync(DshFldId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void DelDshFldAsync(string DshFldId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.DelDshFldOperationCompleted == null)) {
                this.DelDshFldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelDshFldOperationCompleted);
            }
            this.InvokeAsync("DelDshFld", new object[] {
                        DshFldId,
                        dbConnectionString,
                        dbPassword}, this.DelDshFldOperationCompleted, userState);
        }
        
        private void OnDelDshFldOperationCompleted(object arg) {
            if ((this.DelDshFldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelDshFldCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/UpdDshFld", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdDshFld(string PublicAccess, string DshFldId, string DshFldName, int usrId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("UpdDshFld", new object[] {
                        PublicAccess,
                        DshFldId,
                        DshFldName,
                        usrId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdDshFld(string PublicAccess, string DshFldId, string DshFldName, int usrId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdDshFld", new object[] {
                        PublicAccess,
                        DshFldId,
                        DshFldName,
                        usrId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUpdDshFld(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdDshFldAsync(string PublicAccess, string DshFldId, string DshFldName, int usrId, string dbConnectionString, string dbPassword) {
            this.UpdDshFldAsync(PublicAccess, DshFldId, DshFldName, usrId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void UpdDshFldAsync(string PublicAccess, string DshFldId, string DshFldName, int usrId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.UpdDshFldOperationCompleted == null)) {
                this.UpdDshFldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdDshFldOperationCompleted);
            }
            this.InvokeAsync("UpdDshFld", new object[] {
                        PublicAccess,
                        DshFldId,
                        DshFldName,
                        usrId,
                        dbConnectionString,
                        dbPassword}, this.UpdDshFldOperationCompleted, userState);
        }
        
        private void OnUpdDshFldOperationCompleted(object arg) {
            if ((this.UpdDshFldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdDshFldCompleted(this, new UpdDshFldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetSchemaScrImp", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSchemaScrImp(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetSchemaScrImp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSchemaScrImp(int screenId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSchemaScrImp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSchemaScrImp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaScrImpAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetSchemaScrImpAsync(screenId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetSchemaScrImpAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetSchemaScrImpOperationCompleted == null)) {
                this.GetSchemaScrImpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaScrImpOperationCompleted);
            }
            this.InvokeAsync("GetSchemaScrImp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetSchemaScrImpOperationCompleted, userState);
        }
        
        private void OnGetSchemaScrImpOperationCompleted(object arg) {
            if ((this.GetSchemaScrImpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaScrImpCompleted(this, new GetSchemaScrImpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetButtonHlp", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetButtonHlp(int screenId, int reportId, int wizardId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetButtonHlp", new object[] {
                        screenId,
                        reportId,
                        wizardId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetButtonHlp(int screenId, int reportId, int wizardId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetButtonHlp", new object[] {
                        screenId,
                        reportId,
                        wizardId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetButtonHlp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetButtonHlpAsync(int screenId, int reportId, int wizardId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetButtonHlpAsync(screenId, reportId, wizardId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetButtonHlpAsync(int screenId, int reportId, int wizardId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetButtonHlpOperationCompleted == null)) {
                this.GetButtonHlpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetButtonHlpOperationCompleted);
            }
            this.InvokeAsync("GetButtonHlp", new object[] {
                        screenId,
                        reportId,
                        wizardId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetButtonHlpOperationCompleted, userState);
        }
        
        private void OnGetButtonHlpOperationCompleted(object arg) {
            if ((this.GetButtonHlpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetButtonHlpCompleted(this, new GetButtonHlpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetClientRule", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClientRule(int screenId, int reportId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetClientRule", new object[] {
                        screenId,
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientRule(int screenId, int reportId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientRule", new object[] {
                        screenId,
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetClientRule(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientRuleAsync(int screenId, int reportId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetClientRuleAsync(screenId, reportId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetClientRuleAsync(int screenId, int reportId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetClientRuleOperationCompleted == null)) {
                this.GetClientRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientRuleOperationCompleted);
            }
            this.InvokeAsync("GetClientRule", new object[] {
                        screenId,
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetClientRuleOperationCompleted, userState);
        }
        
        private void OnGetClientRuleOperationCompleted(object arg) {
            if ((this.GetClientRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientRuleCompleted(this, new GetClientRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetScreenHlp", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScreenHlp(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetScreenHlp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScreenHlp(int screenId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScreenHlp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetScreenHlp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScreenHlpAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetScreenHlpAsync(screenId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetScreenHlpAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetScreenHlpOperationCompleted == null)) {
                this.GetScreenHlpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScreenHlpOperationCompleted);
            }
            this.InvokeAsync("GetScreenHlp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetScreenHlpOperationCompleted, userState);
        }
        
        private void OnGetScreenHlpOperationCompleted(object arg) {
            if ((this.GetScreenHlpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScreenHlpCompleted(this, new GetScreenHlpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetGlobalFilter", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGlobalFilter(int usrId, int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetGlobalFilter", new object[] {
                        usrId,
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGlobalFilter(int usrId, int screenId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGlobalFilter", new object[] {
                        usrId,
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetGlobalFilter(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGlobalFilterAsync(int usrId, int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetGlobalFilterAsync(usrId, screenId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetGlobalFilterAsync(int usrId, int screenId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetGlobalFilterOperationCompleted == null)) {
                this.GetGlobalFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGlobalFilterOperationCompleted);
            }
            this.InvokeAsync("GetGlobalFilter", new object[] {
                        usrId,
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetGlobalFilterOperationCompleted, userState);
        }
        
        private void OnGetGlobalFilterOperationCompleted(object arg) {
            if ((this.GetGlobalFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGlobalFilterCompleted(this, new GetGlobalFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetScreenFilter", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScreenFilter(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetScreenFilter", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScreenFilter(int screenId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScreenFilter", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetScreenFilter(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScreenFilterAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetScreenFilterAsync(screenId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetScreenFilterAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetScreenFilterOperationCompleted == null)) {
                this.GetScreenFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScreenFilterOperationCompleted);
            }
            this.InvokeAsync("GetScreenFilter", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetScreenFilterOperationCompleted, userState);
        }
        
        private void OnGetScreenFilterOperationCompleted(object arg) {
            if ((this.GetScreenFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScreenFilterCompleted(this, new GetScreenFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetScreenTab", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScreenTab(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetScreenTab", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScreenTab(int screenId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScreenTab", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetScreenTab(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScreenTabAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetScreenTabAsync(screenId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetScreenTabAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetScreenTabOperationCompleted == null)) {
                this.GetScreenTabOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScreenTabOperationCompleted);
            }
            this.InvokeAsync("GetScreenTab", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetScreenTabOperationCompleted, userState);
        }
        
        private void OnGetScreenTabOperationCompleted(object arg) {
            if ((this.GetScreenTabCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScreenTabCompleted(this, new GetScreenTabCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetScreenCriHlp", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScreenCriHlp(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetScreenCriHlp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScreenCriHlp(int screenId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScreenCriHlp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetScreenCriHlp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScreenCriHlpAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetScreenCriHlpAsync(screenId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetScreenCriHlpAsync(int screenId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetScreenCriHlpOperationCompleted == null)) {
                this.GetScreenCriHlpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScreenCriHlpOperationCompleted);
            }
            this.InvokeAsync("GetScreenCriHlp", new object[] {
                        screenId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetScreenCriHlpOperationCompleted, userState);
        }
        
        private void OnGetScreenCriHlpOperationCompleted(object arg) {
            if ((this.GetScreenCriHlpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScreenCriHlpCompleted(this, new GetScreenCriHlpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/LogUsage", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogUsage(int UsrId, string UsageNote, string EntityTitle, int ScreenId, int ReportId, int WizardId, string Miscellaneous, string dbConnectionString, string dbPassword) {
            this.Invoke("LogUsage", new object[] {
                        UsrId,
                        UsageNote,
                        EntityTitle,
                        ScreenId,
                        ReportId,
                        WizardId,
                        Miscellaneous,
                        dbConnectionString,
                        dbPassword});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogUsage(int UsrId, string UsageNote, string EntityTitle, int ScreenId, int ReportId, int WizardId, string Miscellaneous, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogUsage", new object[] {
                        UsrId,
                        UsageNote,
                        EntityTitle,
                        ScreenId,
                        ReportId,
                        WizardId,
                        Miscellaneous,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogUsage(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void LogUsageAsync(int UsrId, string UsageNote, string EntityTitle, int ScreenId, int ReportId, int WizardId, string Miscellaneous, string dbConnectionString, string dbPassword) {
            this.LogUsageAsync(UsrId, UsageNote, EntityTitle, ScreenId, ReportId, WizardId, Miscellaneous, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void LogUsageAsync(int UsrId, string UsageNote, string EntityTitle, int ScreenId, int ReportId, int WizardId, string Miscellaneous, string dbConnectionString, string dbPassword, object userState) {
            if ((this.LogUsageOperationCompleted == null)) {
                this.LogUsageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogUsageOperationCompleted);
            }
            this.InvokeAsync("LogUsage", new object[] {
                        UsrId,
                        UsageNote,
                        EntityTitle,
                        ScreenId,
                        ReportId,
                        WizardId,
                        Miscellaneous,
                        dbConnectionString,
                        dbPassword}, this.LogUsageOperationCompleted, userState);
        }
        
        private void OnLogUsageOperationCompleted(object arg) {
            if ((this.LogUsageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogUsageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetInfoByCol", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInfoByCol(int ScreenId, string ColumnName, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetInfoByCol", new object[] {
                        ScreenId,
                        ColumnName,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInfoByCol(int ScreenId, string ColumnName, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInfoByCol", new object[] {
                        ScreenId,
                        ColumnName,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetInfoByCol(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInfoByColAsync(int ScreenId, string ColumnName, string dbConnectionString, string dbPassword) {
            this.GetInfoByColAsync(ScreenId, ColumnName, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetInfoByColAsync(int ScreenId, string ColumnName, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetInfoByColOperationCompleted == null)) {
                this.GetInfoByColOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInfoByColOperationCompleted);
            }
            this.InvokeAsync("GetInfoByCol", new object[] {
                        ScreenId,
                        ColumnName,
                        dbConnectionString,
                        dbPassword}, this.GetInfoByColOperationCompleted, userState);
        }
        
        private void OnGetInfoByColOperationCompleted(object arg) {
            if ((this.GetInfoByColCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInfoByColCompleted(this, new GetInfoByColCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/IsValidOvride", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidOvride(string cr, int usrId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("IsValidOvride", new object[] {
                        cr,
                        usrId,
                        dbConnectionString,
                        dbPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsValidOvride(string cr, int usrId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsValidOvride", new object[] {
                        cr,
                        usrId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsValidOvride(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidOvrideAsync(string cr, int usrId, string dbConnectionString, string dbPassword) {
            this.IsValidOvrideAsync(cr, usrId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void IsValidOvrideAsync(string cr, int usrId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.IsValidOvrideOperationCompleted == null)) {
                this.IsValidOvrideOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidOvrideOperationCompleted);
            }
            this.InvokeAsync("IsValidOvride", new object[] {
                        cr,
                        usrId,
                        dbConnectionString,
                        dbPassword}, this.IsValidOvrideOperationCompleted, userState);
        }
        
        private void OnIsValidOvrideOperationCompleted(object arg) {
            if ((this.IsValidOvrideCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidOvrideCompleted(this, new IsValidOvrideCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetMsg", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMsg(string Msg, short CultureId, string TechnicalUsr, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetMsg", new object[] {
                        Msg,
                        CultureId,
                        TechnicalUsr,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMsg(string Msg, short CultureId, string TechnicalUsr, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMsg", new object[] {
                        Msg,
                        CultureId,
                        TechnicalUsr,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetMsg(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMsgAsync(string Msg, short CultureId, string TechnicalUsr, string dbConnectionString, string dbPassword) {
            this.GetMsgAsync(Msg, CultureId, TechnicalUsr, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetMsgAsync(string Msg, short CultureId, string TechnicalUsr, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetMsgOperationCompleted == null)) {
                this.GetMsgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMsgOperationCompleted);
            }
            this.InvokeAsync("GetMsg", new object[] {
                        Msg,
                        CultureId,
                        TechnicalUsr,
                        dbConnectionString,
                        dbPassword}, this.GetMsgOperationCompleted, userState);
        }
        
        private void OnGetMsgOperationCompleted(object arg) {
            if ((this.GetMsgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMsgCompleted(this, new GetMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetLabel", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLabel(short CultureId, string LabelCat, string LabelKey, string CompanyId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetLabel", new object[] {
                        CultureId,
                        LabelCat,
                        LabelKey,
                        CompanyId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabel(short CultureId, string LabelCat, string LabelKey, string CompanyId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLabel", new object[] {
                        CultureId,
                        LabelCat,
                        LabelKey,
                        CompanyId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLabel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabelAsync(short CultureId, string LabelCat, string LabelKey, string CompanyId, string dbConnectionString, string dbPassword)
        {
            this.GetLabelAsync(CultureId, LabelCat, LabelKey, CompanyId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetLabelAsync(short CultureId, string LabelCat, string LabelKey, string CompanyId, string dbConnectionString, string dbPassword, object userState)
        {
            if ((this.GetLabelOperationCompleted == null)) {
                this.GetLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabelOperationCompleted);
            }
            this.InvokeAsync("GetLabel", new object[] {
                        CultureId,
                        LabelCat,
                        LabelKey,
                        CompanyId,
                        dbConnectionString,
                        dbPassword}, this.GetLabelOperationCompleted, userState);
        }
        
        private void OnGetLabelOperationCompleted(object arg) {
            if ((this.GetLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabelCompleted(this, new GetLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetLabels", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLabels(short CultureId, string LabelCat, string CompanyId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetLabels", new object[] {
                        CultureId,
                        LabelCat,
                        CompanyId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabels(short CultureId, string LabelCat, string CompanyId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabels", new object[] {
                        CultureId,
                        LabelCat,
                        CompanyId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLabels(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabelsAsync(short CultureId, string LabelCat, string CompanyId, string dbConnectionString, string dbPassword) {
            this.GetLabelsAsync(CultureId, LabelCat, CompanyId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetLabelsAsync(short CultureId, string LabelCat, string CompanyId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetLabelsOperationCompleted == null)) {
                this.GetLabelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabelsOperationCompleted);
            }
            this.InvokeAsync("GetLabels", new object[] {
                        CultureId,
                        LabelCat,
                        CompanyId,
                        dbConnectionString,
                        dbPassword}, this.GetLabelsOperationCompleted, userState);
        }
        
        private void OnGetLabelsOperationCompleted(object arg) {
            if ((this.GetLabelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabelsCompleted(this, new GetLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetFormat", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormat() {
            object[] results = this.Invoke("GetFormat", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFormat(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFormat", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetFormat(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormatAsync() {
            this.GetFormatAsync(null);
        }
        
        /// <remarks/>
        public void GetFormatAsync(object userState) {
            if ((this.GetFormatOperationCompleted == null)) {
                this.GetFormatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormatOperationCompleted);
            }
            this.InvokeAsync("GetFormat", new object[0], this.GetFormatOperationCompleted, userState);
        }
        
        private void OnGetFormatOperationCompleted(object arg) {
            if ((this.GetFormatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormatCompleted(this, new GetFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetScrCriteria", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScrCriteria(string screenId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetScrCriteria", new object[] {
                        screenId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScrCriteria(string screenId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScrCriteria", new object[] {
                        screenId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetScrCriteria(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScrCriteriaAsync(string screenId, string dbConnectionString, string dbPassword) {
            this.GetScrCriteriaAsync(screenId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetScrCriteriaAsync(string screenId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetScrCriteriaOperationCompleted == null)) {
                this.GetScrCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScrCriteriaOperationCompleted);
            }
            this.InvokeAsync("GetScrCriteria", new object[] {
                        screenId,
                        dbConnectionString,
                        dbPassword}, this.GetScrCriteriaOperationCompleted, userState);
        }
        
        private void OnGetScrCriteriaOperationCompleted(object arg) {
            if ((this.GetScrCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScrCriteriaCompleted(this, new GetScrCriteriaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/MkGetScreenIn", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MkGetScreenIn(string screenId, string screenCriId, string procedureName, string appDatabase, string sysDatabase, string multiDesignDb, string dbConnectionString, string dbPassword) {
            this.Invoke("MkGetScreenIn", new object[] {
                        screenId,
                        screenCriId,
                        procedureName,
                        appDatabase,
                        sysDatabase,
                        multiDesignDb,
                        dbConnectionString,
                        dbPassword});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMkGetScreenIn(string screenId, string screenCriId, string procedureName, string appDatabase, string sysDatabase, string multiDesignDb, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MkGetScreenIn", new object[] {
                        screenId,
                        screenCriId,
                        procedureName,
                        appDatabase,
                        sysDatabase,
                        multiDesignDb,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMkGetScreenIn(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MkGetScreenInAsync(string screenId, string screenCriId, string procedureName, string appDatabase, string sysDatabase, string multiDesignDb, string dbConnectionString, string dbPassword) {
            this.MkGetScreenInAsync(screenId, screenCriId, procedureName, appDatabase, sysDatabase, multiDesignDb, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void MkGetScreenInAsync(string screenId, string screenCriId, string procedureName, string appDatabase, string sysDatabase, string multiDesignDb, string dbConnectionString, string dbPassword, object userState) {
            if ((this.MkGetScreenInOperationCompleted == null)) {
                this.MkGetScreenInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMkGetScreenInOperationCompleted);
            }
            this.InvokeAsync("MkGetScreenIn", new object[] {
                        screenId,
                        screenCriId,
                        procedureName,
                        appDatabase,
                        sysDatabase,
                        multiDesignDb,
                        dbConnectionString,
                        dbPassword}, this.MkGetScreenInOperationCompleted, userState);
        }
        
        private void OnMkGetScreenInOperationCompleted(object arg) {
            if ((this.MkGetScreenInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MkGetScreenInCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetScreenIn", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScreenIn(string screenId, string procedureName, string RequiredValid, int topN, string FilterTxt, string ui, string uc, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetScreenIn", new object[] {
                        screenId,
                        procedureName,
                        RequiredValid,
                        topN,
                        FilterTxt,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScreenIn(string screenId, string procedureName, string RequiredValid, string ui, string uc, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScreenIn", new object[] {
                        screenId,
                        procedureName,
                        RequiredValid,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetScreenIn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScreenInAsync(string screenId, string procedureName, string RequiredValid, string ui, string uc, string dbConnectionString, string dbPassword) {
            this.GetScreenInAsync(screenId, procedureName, RequiredValid, ui, uc, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetScreenInAsync(string screenId, string procedureName, string RequiredValid, string ui, string uc, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetScreenInOperationCompleted == null)) {
                this.GetScreenInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScreenInOperationCompleted);
            }
            this.InvokeAsync("GetScreenIn", new object[] {
                        screenId,
                        procedureName,
                        RequiredValid,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword}, this.GetScreenInOperationCompleted, userState);
        }
        
        private void OnGetScreenInOperationCompleted(object arg) {
            if ((this.GetScreenInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScreenInCompleted(this, new GetScreenInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/UpdScrCriteria", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdScrCriteria(string screenId, string programName, string dvCri, int usrId, bool isCriVisible, string ds, string dbConnectionString, string dbPassword) {
            this.Invoke("UpdScrCriteria", new object[] {
                        screenId,
                        programName,
                        dvCri,
                        usrId,
                        isCriVisible,
                        ds,
                        dbConnectionString,
                        dbPassword});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdScrCriteria(string screenId, string programName, string dvCri, int usrId, bool isCriVisible, string ds, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdScrCriteria", new object[] {
                        screenId,
                        programName,
                        dvCri,
                        usrId,
                        isCriVisible,
                        ds,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdScrCriteria(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdScrCriteriaAsync(string screenId, string programName, string dvCri, int usrId, bool isCriVisible, string ds, string dbConnectionString, string dbPassword) {
            this.UpdScrCriteriaAsync(screenId, programName, dvCri, usrId, isCriVisible, ds, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void UpdScrCriteriaAsync(string screenId, string programName, string dvCri, int usrId, bool isCriVisible, string ds, string dbConnectionString, string dbPassword, object userState) {
            if ((this.UpdScrCriteriaOperationCompleted == null)) {
                this.UpdScrCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdScrCriteriaOperationCompleted);
            }
            this.InvokeAsync("UpdScrCriteria", new object[] {
                        screenId,
                        programName,
                        dvCri,
                        usrId,
                        isCriVisible,
                        ds,
                        dbConnectionString,
                        dbPassword}, this.UpdScrCriteriaOperationCompleted, userState);
        }
        
        private void OnUpdScrCriteriaOperationCompleted(object arg) {
            if ((this.UpdScrCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdScrCriteriaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/EncryptString", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptString(string inStr) {
            object[] results = this.Invoke("EncryptString", new object[] {
                        inStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEncryptString(string inStr, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EncryptString", new object[] {
                        inStr}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEncryptString(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptStringAsync(string inStr) {
            this.EncryptStringAsync(inStr, null);
        }
        
        /// <remarks/>
        public void EncryptStringAsync(string inStr, object userState) {
            if ((this.EncryptStringOperationCompleted == null)) {
                this.EncryptStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptStringOperationCompleted);
            }
            this.InvokeAsync("EncryptString", new object[] {
                        inStr}, this.EncryptStringOperationCompleted, userState);
        }
        
        private void OnEncryptStringOperationCompleted(object arg) {
            if ((this.EncryptStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptStringCompleted(this, new EncryptStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetAuthRow", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAuthRow(int ScreenId, string RowAuthoritys, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetAuthRow", new object[] {
                        ScreenId,
                        RowAuthoritys,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAuthRow(int ScreenId, string RowAuthoritys, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAuthRow", new object[] {
                        ScreenId,
                        RowAuthoritys,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAuthRow(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthRowAsync(int ScreenId, string RowAuthoritys, string dbConnectionString, string dbPassword) {
            this.GetAuthRowAsync(ScreenId, RowAuthoritys, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetAuthRowAsync(int ScreenId, string RowAuthoritys, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetAuthRowOperationCompleted == null)) {
                this.GetAuthRowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthRowOperationCompleted);
            }
            this.InvokeAsync("GetAuthRow", new object[] {
                        ScreenId,
                        RowAuthoritys,
                        dbConnectionString,
                        dbPassword}, this.GetAuthRowOperationCompleted, userState);
        }
        
        private void OnGetAuthRowOperationCompleted(object arg) {
            if ((this.GetAuthRowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthRowCompleted(this, new GetAuthRowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetAuthCol", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAuthCol(int ScreenId, string ui, string uc, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetAuthCol", new object[] {
                        ScreenId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAuthCol(int ScreenId, string ui, string uc, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAuthCol", new object[] {
                        ScreenId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAuthCol(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthColAsync(int ScreenId, string ui, string uc, string dbConnectionString, string dbPassword) {
            this.GetAuthColAsync(ScreenId, ui, uc, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetAuthColAsync(int ScreenId, string ui, string uc, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetAuthColOperationCompleted == null)) {
                this.GetAuthColOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthColOperationCompleted);
            }
            this.InvokeAsync("GetAuthCol", new object[] {
                        ScreenId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword}, this.GetAuthColOperationCompleted, userState);
        }
        
        private void OnGetAuthColOperationCompleted(object arg) {
            if ((this.GetAuthColCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthColCompleted(this, new GetAuthColCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetAuthExp", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAuthExp(int ScreenId, short CultureId, string ui, string uc, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetAuthExp", new object[] {
                        ScreenId,
                        CultureId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAuthExp(int ScreenId, short CultureId, string ui, string uc, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAuthExp", new object[] {
                        ScreenId,
                        CultureId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAuthExp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthExpAsync(int ScreenId, short CultureId, string ui, string uc, string dbConnectionString, string dbPassword) {
            this.GetAuthExpAsync(ScreenId, CultureId, ui, uc, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetAuthExpAsync(int ScreenId, short CultureId, string ui, string uc, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetAuthExpOperationCompleted == null)) {
                this.GetAuthExpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthExpOperationCompleted);
            }
            this.InvokeAsync("GetAuthExp", new object[] {
                        ScreenId,
                        CultureId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword}, this.GetAuthExpOperationCompleted, userState);
        }
        
        private void OnGetAuthExpOperationCompleted(object arg) {
            if ((this.GetAuthExpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthExpCompleted(this, new GetAuthExpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetScreenLabel", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScreenLabel(int ScreenId, short CultureId, string ui, string uc, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetScreenLabel", new object[] {
                        ScreenId,
                        CultureId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScreenLabel(int ScreenId, short CultureId, string ui, string uc, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScreenLabel", new object[] {
                        ScreenId,
                        CultureId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetScreenLabel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScreenLabelAsync(int ScreenId, short CultureId, string ui, string uc, string dbConnectionString, string dbPassword) {
            this.GetScreenLabelAsync(ScreenId, CultureId, ui, uc, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetScreenLabelAsync(int ScreenId, short CultureId, string ui, string uc, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetScreenLabelOperationCompleted == null)) {
                this.GetScreenLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScreenLabelOperationCompleted);
            }
            this.InvokeAsync("GetScreenLabel", new object[] {
                        ScreenId,
                        CultureId,
                        ui,
                        uc,
                        dbConnectionString,
                        dbPassword}, this.GetScreenLabelOperationCompleted, userState);
        }
        
        private void OnGetScreenLabelOperationCompleted(object arg) {
            if ((this.GetScreenLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScreenLabelCompleted(this, new GetScreenLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetPrinterList", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrinterList(string UsrGroups, string Members) {
            object[] results = this.Invoke("GetPrinterList", new object[] {
                        UsrGroups,
                        Members});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPrinterList(string UsrGroups, string Members, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPrinterList", new object[] {
                        UsrGroups,
                        Members}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPrinterList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrinterListAsync(string UsrGroups, string Members) {
            this.GetPrinterListAsync(UsrGroups, Members, null);
        }
        
        /// <remarks/>
        public void GetPrinterListAsync(string UsrGroups, string Members, object userState) {
            if ((this.GetPrinterListOperationCompleted == null)) {
                this.GetPrinterListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrinterListOperationCompleted);
            }
            this.InvokeAsync("GetPrinterList", new object[] {
                        UsrGroups,
                        Members}, this.GetPrinterListOperationCompleted, userState);
        }
        
        private void OnGetPrinterListOperationCompleted(object arg) {
            if ((this.GetPrinterListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrinterListCompleted(this, new GetPrinterListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/UpdLastCriteria", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdLastCriteria(int screenId, int reportId, int usrId, int criId, string lastCriteria, string dbConnectionString, string dbPassword) {
            this.Invoke("UpdLastCriteria", new object[] {
                        screenId,
                        reportId,
                        usrId,
                        criId,
                        lastCriteria,
                        dbConnectionString,
                        dbPassword});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdLastCriteria(int screenId, int reportId, int usrId, int criId, string lastCriteria, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdLastCriteria", new object[] {
                        screenId,
                        reportId,
                        usrId,
                        criId,
                        lastCriteria,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdLastCriteria(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdLastCriteriaAsync(int screenId, int reportId, int usrId, int criId, string lastCriteria, string dbConnectionString, string dbPassword) {
            this.UpdLastCriteriaAsync(screenId, reportId, usrId, criId, lastCriteria, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void UpdLastCriteriaAsync(int screenId, int reportId, int usrId, int criId, string lastCriteria, string dbConnectionString, string dbPassword, object userState) {
            if ((this.UpdLastCriteriaOperationCompleted == null)) {
                this.UpdLastCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdLastCriteriaOperationCompleted);
            }
            this.InvokeAsync("UpdLastCriteria", new object[] {
                        screenId,
                        reportId,
                        usrId,
                        criId,
                        lastCriteria,
                        dbConnectionString,
                        dbPassword}, this.UpdLastCriteriaOperationCompleted, userState);
        }
        
        private void OnUpdLastCriteriaOperationCompleted(object arg) {
            if ((this.UpdLastCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdLastCriteriaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetReportHlp", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReportHlp(int reportId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetReportHlp", new object[] {
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportHlp(int reportId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportHlp", new object[] {
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetReportHlp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportHlpAsync(int reportId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetReportHlpAsync(reportId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetReportHlpAsync(int reportId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetReportHlpOperationCompleted == null)) {
                this.GetReportHlpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportHlpOperationCompleted);
            }
            this.InvokeAsync("GetReportHlp", new object[] {
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetReportHlpOperationCompleted, userState);
        }
        
        private void OnGetReportHlpOperationCompleted(object arg) {
            if ((this.GetReportHlpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportHlpCompleted(this, new GetReportHlpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetReportCriHlp", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReportCriHlp(int reportId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetReportCriHlp", new object[] {
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportCriHlp(int reportId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportCriHlp", new object[] {
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetReportCriHlp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportCriHlpAsync(int reportId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetReportCriHlpAsync(reportId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetReportCriHlpAsync(int reportId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetReportCriHlpOperationCompleted == null)) {
                this.GetReportCriHlpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportCriHlpOperationCompleted);
            }
            this.InvokeAsync("GetReportCriHlp", new object[] {
                        reportId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetReportCriHlpOperationCompleted, userState);
        }
        
        private void OnGetReportCriHlpOperationCompleted(object arg) {
            if ((this.GetReportCriHlpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportCriHlpCompleted(this, new GetReportCriHlpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetReportSct", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReportSct() {
            object[] results = this.Invoke("GetReportSct", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportSct(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportSct", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetReportSct(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportSctAsync() {
            this.GetReportSctAsync(null);
        }
        
        /// <remarks/>
        public void GetReportSctAsync(object userState) {
            if ((this.GetReportSctOperationCompleted == null)) {
                this.GetReportSctOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportSctOperationCompleted);
            }
            this.InvokeAsync("GetReportSct", new object[0], this.GetReportSctOperationCompleted, userState);
        }
        
        private void OnGetReportSctOperationCompleted(object arg) {
            if ((this.GetReportSctCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportSctCompleted(this, new GetReportSctCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetReportItem", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReportItem(int ReportId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetReportItem", new object[] {
                        ReportId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportItem(int ReportId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportItem", new object[] {
                        ReportId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetReportItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportItemAsync(int ReportId, string dbConnectionString, string dbPassword) {
            this.GetReportItemAsync(ReportId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetReportItemAsync(int ReportId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetReportItemOperationCompleted == null)) {
                this.GetReportItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportItemOperationCompleted);
            }
            this.InvokeAsync("GetReportItem", new object[] {
                        ReportId,
                        dbConnectionString,
                        dbPassword}, this.GetReportItemOperationCompleted, userState);
        }
        
        private void OnGetReportItemOperationCompleted(object arg) {
            if ((this.GetReportItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportItemCompleted(this, new GetReportItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetRptPwd", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRptPwd(string pwd) {
            object[] results = this.Invoke("GetRptPwd", new object[] {
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRptPwd(string pwd, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRptPwd", new object[] {
                        pwd}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRptPwd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRptPwdAsync(string pwd) {
            this.GetRptPwdAsync(pwd, null);
        }
        
        /// <remarks/>
        public void GetRptPwdAsync(string pwd, object userState) {
            if ((this.GetRptPwdOperationCompleted == null)) {
                this.GetRptPwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRptPwdOperationCompleted);
            }
            this.InvokeAsync("GetRptPwd", new object[] {
                        pwd}, this.GetRptPwdOperationCompleted, userState);
        }
        
        private void OnGetRptPwdOperationCompleted(object arg) {
            if ((this.GetRptPwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRptPwdCompleted(this, new GetRptPwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Rintagi.com/GetSchemaWizImp", RequestNamespace="http://Rintagi.com/", ResponseNamespace="http://Rintagi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSchemaWizImp(int wizardId, short cultureId, string dbConnectionString, string dbPassword) {
            object[] results = this.Invoke("GetSchemaWizImp", new object[] {
                        wizardId,
                        cultureId,
                        dbConnectionString,
                        dbPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSchemaWizImp(int wizardId, short cultureId, string dbConnectionString, string dbPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSchemaWizImp", new object[] {
                        wizardId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSchemaWizImp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaWizImpAsync(int wizardId, short cultureId, string dbConnectionString, string dbPassword) {
            this.GetSchemaWizImpAsync(wizardId, cultureId, dbConnectionString, dbPassword, null);
        }
        
        /// <remarks/>
        public void GetSchemaWizImpAsync(int wizardId, short cultureId, string dbConnectionString, string dbPassword, object userState) {
            if ((this.GetSchemaWizImpOperationCompleted == null)) {
                this.GetSchemaWizImpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaWizImpOperationCompleted);
            }
            this.InvokeAsync("GetSchemaWizImp", new object[] {
                        wizardId,
                        cultureId,
                        dbConnectionString,
                        dbPassword}, this.GetSchemaWizImpOperationCompleted, userState);
        }
        
        private void OnGetSchemaWizImpOperationCompleted(object arg) {
            if ((this.GetSchemaWizImpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaWizImpCompleted(this, new GetSchemaWizImpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLastPageInfoCompletedEventHandler(object sender, GetLastPageInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastPageInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastPageInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void UpdLastPageInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLastCriteriaCompletedEventHandler(object sender, GetLastCriteriaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastCriteriaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void DelDshFldDtlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void DelDshFldCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void UpdDshFldCompletedEventHandler(object sender, UpdDshFldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdDshFldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdDshFldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetSchemaScrImpCompletedEventHandler(object sender, GetSchemaScrImpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaScrImpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaScrImpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetButtonHlpCompletedEventHandler(object sender, GetButtonHlpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetButtonHlpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetButtonHlpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetClientRuleCompletedEventHandler(object sender, GetClientRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetScreenHlpCompletedEventHandler(object sender, GetScreenHlpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScreenHlpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScreenHlpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetGlobalFilterCompletedEventHandler(object sender, GetGlobalFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGlobalFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGlobalFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetScreenFilterCompletedEventHandler(object sender, GetScreenFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScreenFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScreenFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetScreenTabCompletedEventHandler(object sender, GetScreenTabCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScreenTabCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScreenTabCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetScreenCriHlpCompletedEventHandler(object sender, GetScreenCriHlpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScreenCriHlpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScreenCriHlpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void LogUsageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetInfoByColCompletedEventHandler(object sender, GetInfoByColCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInfoByColCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInfoByColCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void IsValidOvrideCompletedEventHandler(object sender, IsValidOvrideCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidOvrideCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidOvrideCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetMsgCompletedEventHandler(object sender, GetMsgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMsgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMsgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabelCompletedEventHandler(object sender, GetLabelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabelsCompletedEventHandler(object sender, GetLabelsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetFormatCompletedEventHandler(object sender, GetFormatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetScrCriteriaCompletedEventHandler(object sender, GetScrCriteriaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScrCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScrCriteriaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void MkGetScreenInCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetScreenInCompletedEventHandler(object sender, GetScreenInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScreenInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScreenInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void UpdScrCriteriaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void EncryptStringCompletedEventHandler(object sender, EncryptStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetAuthRowCompletedEventHandler(object sender, GetAuthRowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthRowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthRowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetAuthColCompletedEventHandler(object sender, GetAuthColCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthColCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthColCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetAuthExpCompletedEventHandler(object sender, GetAuthExpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthExpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthExpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetScreenLabelCompletedEventHandler(object sender, GetScreenLabelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScreenLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScreenLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetPrinterListCompletedEventHandler(object sender, GetPrinterListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrinterListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrinterListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void UpdLastCriteriaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetReportHlpCompletedEventHandler(object sender, GetReportHlpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportHlpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportHlpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetReportCriHlpCompletedEventHandler(object sender, GetReportCriHlpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportCriHlpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportCriHlpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetReportSctCompletedEventHandler(object sender, GetReportSctCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportSctCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportSctCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetReportItemCompletedEventHandler(object sender, GetReportItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetRptPwdCompletedEventHandler(object sender, GetRptPwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRptPwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRptPwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetSchemaWizImpCompletedEventHandler(object sender, GetSchemaWizImpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaWizImpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaWizImpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
