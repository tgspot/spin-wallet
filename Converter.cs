//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 
namespace RO.Common3 {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="convertSoap", Namespace="http://tempuri.org/")]
    public partial class Converter : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        
        private System.Threading.SendOrPostCallback RTF2PDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback XML2XLSOperationCompleted;
        
        /// <remarks/>
        public Converter() {
            this.Url = "http://localhost/WsConverter/convert.asmx";
        }
        
        /// <remarks/>
        public event RTF2PDFCompletedEventHandler RTF2PDFCompleted;
        
        /// <remarks/>
        public event XML2XLSCompletedEventHandler XML2XLSCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RTF2PDF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] RTF2PDF([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, string checksum) {
            object[] results = this.Invoke("RTF2PDF", new object[] {
                        content,
                        checksum});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRTF2PDF(byte[] content, string checksum, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RTF2PDF", new object[] {
                        content,
                        checksum}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndRTF2PDF(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void RTF2PDFAsync(byte[] content, string checksum) {
            this.RTF2PDFAsync(content, checksum, null);
        }
        
        /// <remarks/>
        public void RTF2PDFAsync(byte[] content, string checksum, object userState) {
            if ((this.RTF2PDFOperationCompleted == null)) {
                this.RTF2PDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRTF2PDFOperationCompleted);
            }
            this.InvokeAsync("RTF2PDF", new object[] {
                        content,
                        checksum}, this.RTF2PDFOperationCompleted, userState);
        }
        
        private void OnRTF2PDFOperationCompleted(object arg) {
            if ((this.RTF2PDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RTF2PDFCompleted(this, new RTF2PDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/XML2XLS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] XML2XLS([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, string checksum) {
            object[] results = this.Invoke("XML2XLS", new object[] {
                        content,
                        checksum});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginXML2XLS(byte[] content, string checksum, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("XML2XLS", new object[] {
                        content,
                        checksum}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndXML2XLS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void XML2XLSAsync(byte[] content, string checksum) {
            this.XML2XLSAsync(content, checksum, null);
        }
        
        /// <remarks/>
        public void XML2XLSAsync(byte[] content, string checksum, object userState) {
            if ((this.XML2XLSOperationCompleted == null)) {
                this.XML2XLSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXML2XLSOperationCompleted);
            }
            this.InvokeAsync("XML2XLS", new object[] {
                        content,
                        checksum}, this.XML2XLSOperationCompleted, userState);
        }
        
        private void OnXML2XLSOperationCompleted(object arg) {
            if ((this.XML2XLSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.XML2XLSCompleted(this, new XML2XLSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void RTF2PDFCompletedEventHandler(object sender, RTF2PDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RTF2PDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RTF2PDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void XML2XLSCompletedEventHandler(object sender, XML2XLSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class XML2XLSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal XML2XLSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}
